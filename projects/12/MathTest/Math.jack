// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16); // 16 is the bit size of an int block
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;
        return;
    }

    function boolean bit(int x, int i) {
        if ((x & twoToThe[i]) = twoToThe[i]) { return true; }
        return false;
    }
    
    function int power(int x, int y) {
        var int pow, i;
        let pow = 1;
        let i = 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        while (i < y) {
            let pow = Math.multiply(pow, x);
            let i = i + 1;
        }

        return pow;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) { return -x; }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, w;
        
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        let w = 16; // bit-size (bits inside) of one int block on memory

        while (i < w) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, qtimesyDoubled, result;
        var boolean isOneOperandNegative;

        let isOneOperandNegative = false;
        if ((x < 0) | (y < 0)) {
            let isOneOperandNegative = true;
            
            if ((x < 0) & (y < 0)) {
                let isOneOperandNegative = false;
            }
            
        }
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) { return 0; }

        if ((y + y) < 0) {
            let q = 0;
        } else {
            let q = Math.divide(x, y + y);
        }
        
        let qtimesyDoubled = Math.multiply(q, y);
        let qtimesyDoubled = qtimesyDoubled + qtimesyDoubled;
        
        if ((x - qtimesyDoubled) < y) {
            let result = q + q;
        }
        else {
            let result = (q + q) + 1;
        }

        if (isOneOperandNegative) {
            let result = -result;
        }
        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, yPlus2Powi, yPlus2PowiSquared;

        let i = 15;
        while (i > -1) {
            let yPlus2Powi = y + twoToThe[i];
            let yPlus2PowiSquared = Math.multiply(yPlus2Powi, yPlus2Powi);
            
            if (((yPlus2PowiSquared < x) | (yPlus2PowiSquared = x)) & (yPlus2PowiSquared > 0)) {
                let y = yPlus2Powi;
            }
            
            let i = i - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) { return a; }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) { return a; }
        return b;
    }
}
