// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array pointer;
        var Array suitableSegmentPtr;
        var Array assignedBlockPtr;
        
        let pointer = freeList;
        let suitableSegmentPtr = 0;
        let assignedBlockPtr = 0;
        
        if ((suitableSegmentPtr = 0) & (pointer[1] > (size + 1))) {
            let suitableSegmentPtr = pointer;
        }

        while (~(pointer = 0)) {
            if ((pointer[1] > (size + 1)) & (pointer[1] < (suitableSegmentPtr[1] + 1)) & (~(suitableSegmentPtr = 0))) {
                let suitableSegmentPtr = pointer;
            }
            let pointer = pointer[0];
        }

        if (suitableSegmentPtr = 0) { // unable to found free space
            do Sys.error(-1);
            do Sys.halt();
        }

        let assignedBlockPtr = suitableSegmentPtr + ((suitableSegmentPtr[1] + 2) - (size + 2));
        let assignedBlockPtr[0] = 0;
        let assignedBlockPtr[1] = size;

        let suitableSegmentPtr[1] = suitableSegmentPtr[1] - (size + 2);

        return (assignedBlockPtr + 2);
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array pointer;
        var boolean shouldExitLoop;
        
        let pointer = freeList;
        let shouldExitLoop = false;
        
        while (~(shouldExitLoop)) {
            if (pointer = 0) {
                let pointer = o - 2;
                let shouldExitLoop = true;
            }
            let pointer = pointer[0];
        }

        return;
    }    
}
