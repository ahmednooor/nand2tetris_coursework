// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    Not16(in[0..14]=address, in[15]=false, out=notAddr);

    // make sure the keyboard bit isn't selected. if it is, then load bit is 0
    And16(
        a[0]=false, 
        a[1]=false, 
        a[2]=false, 
        a[3]=false, 
        a[4]=false, 
        a[5]=false, 
        a[6]=false, 
        a[7]=false, 
        a[8]=false, 
        a[9]=false, 
        a[10]=false, 
        a[11]=false, 
        a[12]=false, 
        a[13]=true, 
        a[14]=true, 
        a[15]=false, 
        b=notAddr, out=isItKeyboard1);
    Not16(in=isItKeyboard1, out=isItKeyboard2);
    Custom16BitFullAdder(a=isItKeyboard2, b=false, initialcarry=true, sum=false, finalcarry=isItKeyboard);
    Not(in=isItKeyboard, out=notKeyboard);
    And(a=notKeyboard, b=load, out=isLoadOn);

    DMux(in=isLoadOn, sel=address[14], a=ramLoadBit, b=screenLoadBit);

    RAM16K(in=in, load=ramLoadBit, address=address[0..13], out=ramOut);
    Screen(in=in, load=screenLoadBit, address=address[0..12], out=screenOut);
    Keyboard(out=keyboardOut);

    Mux4Way16(a=ramOut, b=ramOut, c=screenOut, d=keyboardOut, sel=address[13..14], out=out);
}
