// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // first mux
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=firstMuxOut);

    // A register load bit
    And(a=instruction[5], b=instruction[15], out=aLoadTemp1);
    Not(in=instruction[15], out=aLoadTemp2);
    Or(a=aLoadTemp1, b=aLoadTemp2, out=aLoadBit);
    // A register
    ARegister(in=firstMuxOut, load=aLoadBit, out=aRegisterOut, out[0..14]=addressM);

    // D register load bit
    And(a=instruction[4], b=instruction[15], out=dLoadBit);
    // D register
    DRegister(in=aluOut, load=dLoadBit, out=dRegisterOut);

    // second mux
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=secondMuxOut);

    // ALU
    ALU(x=dRegisterOut, y=secondMuxOut, 
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], 
        f=instruction[7], no=instruction[6], 
        out=aluOut, out=outM,
        zr=zr, ng=ng);

    // jump instruction logic and PC load bit
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    // >0
    And3In1Out(a=instruction[0], b=notZr, c=notNg, out=JGT);
    // =0
    And(a=instruction[1], b=zr, out=JEQ);
    // >=0
    Or(a=zr, b=notNg, out=zrOrNotNg);
    And3In1Out(a=zrOrNotNg, b=instruction[1], c=instruction[0], out=JGE);
    // <0
    And(a=instruction[2], b=ng, out=JLT);
    // unconditional jump
    And3In1Out(a=instruction[0], b=instruction[1], c=instruction[2], out=JMP);
    // !=0
    And3In1Out(a=instruction[0], b=instruction[2], c=notZr, out=JNE);
    // <=0
    Or(a=ng, b=zr, out=ngOrZr);
    And3In1Out(a=ngOrZr, b=instruction[2], c=instruction[1], out=JLE);

    // PC load bit
    Or8Way(
        in[0]=JGT, in[1]=JEQ, in[2]=JGE, in[3]=JLT, 
        in[4]=JMP, in[5]=JNE, in[6]=JLE, in[7]=false,
        out=isJumpOn);
    And(a=instruction[15], b=isJumpOn, out=PCloadBit);
    
    // PC Program Counter
    PC(in=aRegisterOut, load=PCloadBit, inc=true, reset=reset, out[0..14]=pc);

    // writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

}