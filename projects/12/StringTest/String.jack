// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        let length = 0;
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int lastIntIndex, i, intToReturn, curInt;
        var boolean isNeg;
        var String curStr;
        
        let curStr = this;
        let lastIntIndex = length;
        let isNeg = false;

        if (lastIntIndex > 0) {
            if (curStr.charAt(0) = 45) {
                let isNeg = true;
                do curStr.setCharAt(0, 48);
            }
            if (curStr.charAt(0) = 43) {
                do curStr.setCharAt(0, 48);
            }
        }
        
        let i = 0;
        while (i < lastIntIndex) {
            if (~((curStr.charAt(i) > 47) & (curStr.charAt(i) < 59))) {
                let lastIntIndex = i;
            }
            let i = i + 1;
        }
        
        let lastIntIndex = lastIntIndex - 1;
        let intToReturn = 0;
        let i = 1;
        while (lastIntIndex > -1) {
            let curInt = String.getIntFromNumChar(curStr.charAt(lastIntIndex));
            let intToReturn = intToReturn + (curInt * i);
            let i = i * 10;
            let lastIntIndex = lastIntIndex - 1;
        }

        if (isNeg) {
            let intToReturn = -intToReturn;
        }
        // do curStr.dispose();
        return intToReturn;
    }

    /**								
     * Get the actual integer version of the ascii numeric character
     */
    function int getIntFromNumChar(char c) {
        if (c = 48) { return 0; }
        if (c = 49) { return 1; }
        if (c = 50) { return 2; }
        if (c = 51) { return 3; }
        if (c = 52) { return 4; }
        if (c = 53) { return 5; }
        if (c = 54) { return 6; }
        if (c = 55) { return 7; }
        if (c = 56) { return 8; }
        if (c = 57) { return 9; }
        return 0;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var Array units;
        var int len;
        var boolean isNeg;
        var String curStr;
        let curStr = this;
        if (val < 0) {
            let isNeg = true;
            let val = -val;
        }
        let units = Array.new(6);
        let len = -1;
        while (~(val = 0)) {
            let len = len + 1;
            let units[len] = 48 + (val - ((val / 10) * 10));
            let val = val / 10;
        }
        if (isNeg) {
            let len = len + 1;
            let units[len] = 45;
        }
        let length = 0;
        while (len > -1) {
            do curStr.appendChar(units[len]);
            let len = len - 1;
        }
        do units.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
